const clientId = "9e17ed2b2ad0412390528ef37a97e281"; // Insert client ID here.
const redirectUri = "http://localhost:5173/?/callback"; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.

let accessToken;
let userId;

const Spotify = {
  async getCurrentUserId() {
    if (userId) {
      return userId;
    }

    try {
      const accessToken = await Spotify.getAccessToken();
      const headers = { Authorization: `Bearer ${accessToken}` };

      const userResponse = await fetch("https://api.spotify.com/v1/me", {
        headers,
      });

      if (!userResponse.ok) {
        throw new Error("Failed to fetch user data");
      }

      const jsonResponse = await userResponse.json();
      userId = jsonResponse.id;

      return userId;
    } catch (error) {
      console.error("Error fetching user ID:", error);
      throw error;
    }
  },

  async getAccessToken() {
    if (accessToken) {
      return accessToken;
    }

    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);
    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);
    if (accessTokenMatch && expiresInMatch) {
      accessToken = accessTokenMatch[1];
      const expiresIn = Number(expiresInMatch[1]);
      window.setTimeout(() => (accessToken = ""), expiresIn * 1000);
      window.history.pushState("Access Token", null, "/"); // This clears the parameters, allowing us to grab a new access token when it expires.
      return accessToken;
    } else {
      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;
      window.location = accessUrl;
    }
  },

  // async search(term) {
  //   const accessToken = await Spotify.getAccessToken();
  //   const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {
  //     headers: {
  //       Authorization: `Bearer ${accessToken}`
  //     }
  //   });
  //   const jsonResponse = await response.json();
  //   if (!jsonResponse.tracks) {
  //     return [];
  //   }
  //   return jsonResponse.tracks.items.map(track => ({
  //     id: track.id,
  //     name: track.name,





  async search(term, accessToken) {
    // const accessToken = await Spotify.getAccessToken();
    const response = await fetch(
      `https://api.spotify.com/v1/search?type=track&q=${term}`,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      }
    );
    const jsonResponse = await response.json();
    if (!jsonResponse.tracks) {
      return [];
    }
    return jsonResponse.tracks.items.map((track) => ({
      id: track.id,
      name: track.name,
      artist: track.artists[0].name,
      album: track.album.name,
      uri: track.uri,
    }));
  },

  async savePlaylist(name, trackUris, id) {
    if (!name || !trackUris.length) {
      return;
    }

    const accessToken = await Spotify.getAccessToken();
    const headers = { Authorization: `Bearer ${accessToken}` };

    const userId = await Spotify.getCurrentUserId();

    let playlistId;

    if (id) {
      // Update existing playlist name
      await fetch(
        `https://api.spotify.com/v1/users/${userId}/playlists/${id}`,
        {
          headers,
          method: "PUT",
          body: JSON.stringify({ name }),
        }
      );
      playlistId = id;
      console.log('Name updated')
    } else {
      // Create new playlist
      const playlistResponse = await fetch(
        `https://api.spotify.com/v1/users/${userId}/playlists`,
        {
          headers,
          method: "POST",
          body: JSON.stringify({ name }),
        }
      );
      const playlistJson = await playlistResponse.json();
      playlistId = playlistJson.id;
      console.log('Created new playlist')
    }

    await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,
      {
        headers,
        method: "POST",
        body: JSON.stringify({ uris: trackUris }),
      }
    );
  },

  async getUserPlaylists() {
    try {
      const accessToken = await Spotify.getAccessToken();
      const headers = { Authorization: `Bearer ${accessToken}` };

      const userId = await Spotify.getCurrentUserId();

      const userPlaylistsResponse = await fetch(
        `https://api.spotify.com/v1/users/${userId}/playlists`,
        {
          headers,
          method: "GET",
        }
      );
      const userPlaylists = await userPlaylistsResponse.json();
      return userPlaylists.items;
    } catch (error) {
      console.error("Error fetching user playlists:", error.message);
    }
  },

  async getPlaylist(playlistId) {
    try {
      const accessToken = await Spotify.getAccessToken();
      const headers = { Authorization: `Bearer ${accessToken}` };

      const userId = await Spotify.getCurrentUserId();
      const playlistTrackResponse = await fetch(
        `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}`,
        {
          headers,
          method: "GET",
        }
      );

      const playlistTracks = await playlistTrackResponse.json();
      return playlistTracks;
    } catch (error) {
      console.log("Error fetching playlist tracks");
    }
  },
};

export default Spotify;
